#!/bin/zsh

function error_message {
    echo "\nerror: $1"
    exit 1
}

DRY=true

echo "\nset -k"
$DRY || set -k


echo "\nDIRNAME=$(dirname $0)"
DIRNAME=$(dirname $0)

echo "\nsource \"$DIRNAME/arch-config\""
source "$DIRNAME/arch-config" || error_message "can't find config file"
echo "\nsource \"$DIRNAME/functions.sh\""
source "$DIRNAME/functions.sh" || error_message "can't find functions.sh file"



echo "\nmodprobe raid0"
$DRY || modprobe raid0
echo "\nmodprobe raid1"
$DRY || modprobe raid1
echo "\nmodprobe raid5"
$DRY || modprobe raid5
echo "\nmodprobe dm-mod"
$DRY || modprobe dm-mod
echo "\nmodprobe bcache"
$DRY || modprobe bcache



for i in ${DRIVESARR[*]}; do
	DEV="/dev/sd${i}"
	echo "\n# clearing device: $DEV"
	echo "\ndd if=/dev/zero of=$DEV bs=512 count=$CLEAR_BLOCKS"
	$DRY || dd if=/dev/zero of=$DEV bs=512 count=$CLEAR_BLOCKS
	echo "\ndd if=/dev/zero of=$DEV bs=512 seek=$(( $(blockdev --getsz $DEV) - $CLEAR_BLOCKS )) count=$CLEAR_BLOCKS"
	$DRY || dd if=/dev/zero of=$DEV bs=512 seek=$(( $(blockdev --getsz $DEV) - $CLEAR_BLOCKS )) count=$CLEAR_BLOCKS
done


for i in ${BCACHE_DRIVESARR[*]}; do
	DEV="/dev/sd${i}"
	echo "\n# clearing device: $DEV"
	echo "\ndd if=/dev/zero of=$DEV bs=1M"
	$DRY || dd if=/dev/zero of=$DEV bs=1M
done



#mkfs.btrfs -d raid1 /dev/sd[${DRIVES}]

if [[ $BIOS = "efi" ]]; then
	echo "\necho \"2\\\no\\\ny\\\nn\\\n\\\n\\\n+100M\\\nef00\\\nn\\\n\\\n\\\n+200M\\\n\\\nn\\\n\\\n\\\n+${SWAPSIZE}\\\n8200\\\nn\\\n\\\n\\\n+${BCACHESIZE}\\\nfd00\\\nn\\\n\\\n\\\n+100M\\\nbf00\\\np\\\nw\\\ny\\\n\" | gdisk /dev/sd$BCACHE_DRIVESARR[1]"
	$DRY || echo "\n2\no\ny\nn\n\n\n+100M\nef00\nn\n\n\n+200M\n\nn\n\n\n+${SWAPSIZE}\n8200\nn\n\n\n\nfd00\np\nw\ny\n" | gdisk /dev/sd$BCACHE_DRIVESARR[1]
else
	echo "\n2\no\ny\nn\n\n\n+100M\nef02\nn\n\n\n+100M\nfd00\nn\n\n\n-50M\nfd00\np\nw\ny\n" | gdisk /dev/sd$DRIVESARR[1]
fi

	# copy partition table to other hard drives

echo "\nsgdisk --backup=table /dev/sd$BCACHE_DRIVESARR[1]"
$DRY || sgdisk --backup=table /dev/sd$BCACHE_DRIVESARR[1]
for i in ${BCACHE_DRIVESARR[*]}
do
	echo "\nsgdisk --load-backup=table /dev/sd${i}" 
	$DRY || sgdisk --load-backup=table /dev/sd${i} 
        echo "partprobe /dev/sd${i}"
        $DRY || partprobe /dev/sd${i}
done


echo "\nmdadm --create /dev/md0 --level=1 --metadata=1.2 --raid-devices=${#BCACHE_DRIVES} /dev/sd[${BCACHE_DRIVES}]3" #swap
$DRY || mdadm --create /dev/md0 --level=1 --metadata=1.2 --raid-devices=${#BCACHE_DRIVES} /dev/sd[${BCACHE_DRIVES}]3


install_yaourt

echo "\nyaourt -S --noconfirm bcache-tools"
$DRY || yaourt -S --noconfirm bcache-tools


echo "\nmake-bcache --wipe-bcache --writeback -B /dev/sd[${DRIVES}] -C /dev/md0"
$DRY || make-bcache --wipe-bcache --writeback -B /dev/sd[${DRIVES}] -C /dev/md0


	# monitor 
	# watch -n 1 cat /proc/mdstat


	# for checking raid array run the following as super user:
	# echo check >> /sys/block/mdX/md/sync_action
	#
	# monitor the process:
	# watch -n 1 cat /proc/mdstat
	#
	# stop the check with:
	# echo idle >> /sys/block/mdX/md/sync_action






for i in ${BCACHE_DRIVESARR[*]}
do
	echo "\nmkfs.vfat -F 32 /dev/sd${i}1"
	$DRY || mkfs.vfat -F 32 /dev/sd${i}1
	echo "\nmkfs.ext3 -L boot /dev/sd${i}2"
	$DRY || mkfs.ext3 -L boot /dev/sd${i}2
	echo "\nmkswap -L swap_${i} /dev/sd${i}3"
	$DRY || mkswap -L swap_${i} /dev/sd${i}3
	echo "\nswapon /dev/sd${i}3"
	$DRY || swapon /dev/sd${i}3

done


echo "\nmkfs.btrfs -f -d raid1 /dev/bcache0 /dev/bcache1"
$DRY || mkfs.btrfs -f -d raid1 /dev/bcache0 /dev/bcache1

echo "\nmount /dev/bcache0 /mnt/"
$DRY || mount /dev/bcache0 /mnt/
echo "\nbtrfs subvolume create /mnt/home"
$DRY || btrfs subvolume create /mnt/home

echo "\nmkdir /mnt/boot"
$DRY || mkdir /mnt/boot
echo "\nmount  /dev/sdc2 /mnt/boot"
$DRY || mount  /dev/sdc2 /mnt/boot



echo "\nmkdir /mnt/boot/efi"
$DRY || mkdir /mnt/boot/efi
echo "\nmount /dev/sdc1 /mnt/boot/efi"
$DRY || mount /dev/sdc1 /mnt/boot/efi


echo "\npacstrap /mnt base base-devel zsh"
$DRY || pacstrap /mnt base base-devel zsh

echo "\ngenfstab -U -p /mnt >> /mnt/etc/fstab"
$DRY || genfstab -U -p /mnt >> /mnt/etc/fstab

#cp install-arch-raid-chroot /mnt/
#chmod 755 /mnt/install-arch-raid-chroot


echo "\narch-chroot /mnt" #/install-arch-raid-chroot
$DRY || arch-chroot /mnt #/install-arch-raid-chroot




