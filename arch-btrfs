#!/bin/zsh

set -k
#set -o nounset

DIRNAME=$(dirname $0)

if [[ -d "/sys/firmware/efi" ]]; then
    echo "using uefi boot"
    BIOS="efi"
else 
    echo "using normal bios boot"
    BIOS="bios"
fi


[[ -a arch-config ]] || cd /root/arch
[[ -a arch-config ]] || { echo "no config found" ; exit }



echo "starting arch install script"

source arch-config
source functions.sh


install_yaourt


yaourt -S --noconfirm bcache-tools



if [[ $BIOS == "efi" ]]; then
	modprobe efivars
fi


if [[ $BIOS == "efi" ]]; then
	BOOT_PART=ef00
else
	BOOT_PART=ef02
fi

clear_disk sda $CLEAR_BLOCKS
clear_disk sdb $CLEAR_BLOCKS

echo "o\ny\nn\n\n\n+128M\n${BOOT_PART}\nn\n\n\n+512M\n\nn\n\n\n+${SWAP_SIZE}\n8200\nn\n\n\n+${BCACHE_SIZE}\n\nn\n\n\n\n\np\nw\ny\n" | gdisk /dev/sda

#echo "2\no\ny\nn\n\n\n+128M\n${BOOT_PART}\nn\n\n\n+512M\n\nn\n\n\n+${SWAP_SIZE}\n8200\nn\n\n\n+${BCACHE_SIZE}\n\nn\n\n\n\n\np\nw\ny\n" | gdisk /dev/sda


echo "o\ny\nn\n\n\n\n\np\nw\ny\n" | gdisk /dev/sdb

make-bcache -B /dev/sdb1 -C /dev/sda4

sleep 3

echo writeback > /sys/block/bcache0/bcache/cache_mode

#echo "/dev/sdb1" > /sys/fs/bcache/register_quiet
#uid=$(ll /sys/fs/bcache | awk '{print $9}' | grep '-' | sed "s/\///g")
#echo "$uid"
#echo "$uid" > /sys/block/bcache0/bcache/attach

gdisk -l /dev/sda
gdisk -l /dev/sdb

yaourt -S --noconfirm zfs-git 


mkfs.ext4 -L boot /dev/sda2

modprobe zfs


id_sda5="/dev/disk/by-id/"$(ll /dev/disk/by-id | grep sda5 | awk '{print $9}')
id_sdb5="/dev/disk/by-id/"$(ll /dev/disk/by-id | grep sdb5 | awk '{print $9}')

zpool create zroot mirror $id_sda3 $id_sdb3

zpool add zroot log mirror $id_sdc1 $id_sdd1

zpool add zroot cache $id_sdc2 $id_sdd2

zpool status


#zfs set mountpoint=/ zroot

zpool set bootfs=zroot zroot

cp /etc/zfs/zpool.cache{,.orig}
zpool export zroot
zpool import zroot


mkdir /zroot/home
mkdir /zroot/boot


zfs create zroot/home -o mountpoint=/zroot/home

zfs create -V 8G -b 4K zroot/swap

mount /dev/sda2 /zroot/boot

mkswap /dev/zvol/zroot/swap
swapon /dev/zvol/zroot/swap



pacstrap /zroot base base-devel zsh    



genfstab -U -p /zroot | grep boot >> /zroot/etc/fstab


echo "/dev/zvol/zroot/swap none swap defaults 0 0" >> /zroot/etc/fstab




arch-chroot /zroot

zsh
set -k


# install yaourt 
pacman -S --noconfirm yajl wget

cd /tmp
wget https://aur.archlinux.org/packages/pa/package-query/package-query.tar.gz
tar -xpvf package-query.tar.gz
cd package-query
makepkg -i --asroot --noconfirm

cd /tmp
wget https://aur.archlinux.org/packages/ya/yaourt/yaourt.tar.gz
tar -xpvf yaourt.tar.gz
cd yaourt
makepkg -i --asroot --noconfirm


#install zfs packages
yaourt -S --noconfirm spl spl-utils zfs zfs-utils

exit
exit

cp /etc/zfs/zpool.cache.orig /zroot/etc/zfs/zpool.cache



arch-chroot /zroot

zsh


set -k


modprobe zfs

sed -i 's/filesystems keyboard fsck/keyboard zfs filesystems fsck/' /etc/mkinitcpio.conf

HOSTNAME=zzz

hostname $HOSTNAME
echo ${HOSTNAME} > /etc/hostname



sed -i 's/#sl_SI.UTF-8/sl_SI.UTF-8/' /etc/locale.gen
sed -i 's/#en_US.UTF-8/en_US.UTF-8/' /etc/locale.gen
sed -i 's/#en_GB.UTF-8/en_GB.UTF-8/' /etc/locale.gen
locale-gen




echo LANG=en_US.UTF-8 > /etc/locale.conf
export LANG=en_US.UTF-8

echo KEYMAP=us > /etc/vconsole.conf
sed -i '$ a FONT=' /etc/vconsole.conf
sed -i '$ a FONT_MAP=' /etc/vconsole.conf






pacman -S --noconfirm ntp 
ln -s /usr/share/zoneinfo/Europe/Ljubljana /etc/localtime
ntpd -qg
hwclock --systohc --utc



sed -i "s/\#\[multilib\]/\[multilib\]\nInclude = \/etc\/pacman\.d\/mirrorlist/g" /etc/pacman.conf 



pacman -Syy
pacman -S --noconfirm bash-completion vim sudo git openssh dosfstools wget htop
sed -i 's/# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/' /etc/sudoers





mkinitcpio -p linux



pacman -S --noconfirm grub-bios
grub-install --recheck /dev/sda



mkdir -p /boot/grub/locale
cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo

grub-mkconfig -o /boot/grub/grub.cfg

echo 'set timeout=2
set default=0

# (0) Arch Linux
menuentry "Arch Linux" {
    set root=(hd1,msdos1)
    linux /vmlinuz-linux zfs=zroot
    initrd /initramfs-linux.img
}
' > /boot/grub/grub.cfg






ROOTPASS=httn
USERPASS=httn
NEWUSERNAME=zidar

useradd -m -g users -G wheel,storage,power -s /bin/bash $NEWUSERNAME
echo "$NEWUSERNAME\n\n\n\n" | chfn $NEWUSERNAME

echo "${USERPASS}\n${USERPASS}" | passwd $NEWUSERNAME
echo "${ROOTPASS}\n${ROOTPASS}" | passwd root

systemctl enable sshd.service







pacman -S --noconfirm alsa-utils
pacman -S --noconfirm xorg-server xorg-xinit xorg-server-utils
#pacman -S --noconfirm mesa

if [[ $VBOX == "yes" ]]; then
	pacman -S --noconfirm virtualbox-guest-utils
	modprobe -a vboxguest vboxsf vboxvideo
	echo 'vboxguest\nvboxsf\nvboxvideo' > /etc/modules-load.d/virtualbox.conf
else
	# for ati:
	# pacman -S --noconfirm xf86-video-ati

	# for intel:
	# pacman -S --noconfirm xf86-video-intel 

	# for nvidia:
	# pacman -S --noconfirm xf86-video-nouveau 
	pacman -S --noconfirm nvidia 
fi







pacman -S --noconfirm gnome gnome-extra 
pacman -S --noconfirm ttf-ubuntu-font-family ttf-liberation ttf-inconsolata ttf-droid ttf-linux-libertine ttf-dejavu ttf-bitstream-vera

systemctl enable gdm.service

if [[ $NETCONFIGFILE == "" ]]; then
	pacman -S --noconfirm  networkmanager network-manager-applet
	systemctl enable NetworkManager.service 

	# pacman -S --noconfirm wicd wicd-gtk
	# systemctl enable wicd.service

else
	cp /root/arch/$NETCONFIGFILE /etc/netctl/
	netctl enable $NETCONFIGFILE
fi

sed -i "s/\[daemon\]/\# Enable automatic login for user\n\[daemon\]\nAutomaticLogin=${NEWUSERNAME}\nAutomaticLoginEnable=True/g" /etc/gdm/custom.conf



#runuser -l ${NEWUSERNAME} -c "gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view'"





pacman -S --noconfirm  terminator blender gimp meld gitg smartmontools firefox rsync sbt scala python2 ipython2 vlc pidgin octave gnuplot deluge rdiff-backup

yaourt -S --noconfirm dropbox nautilus-dropbox

pacman -R --noconfirm epiphany empathy gnome-chess gnome-mines gnome-sudoku gnome-tetravex gnome-robots gnome-klotski gnome-nibbles totem gnome-documents gnome-photos tracker evolution totem-plugin gnome-music gnome-online-miners bijiben


#
# > tune2fs -o journal_data_writeback /dev/sdXY
# data=writeback,noatime
#



if [[ $LAPTOP == "yes" ]]; then
	pacman -S --noconfirm xf86-input-synaptics
fi




exit

umount /mnt/boot

zfs umount -a

zpool export zroot



